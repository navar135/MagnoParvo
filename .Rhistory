v
#subset data for females that smoke
femSmoker<- subset(females, Smoke=="Yes")
#find maximum SAT score
cat("maximum SAT scores for females that smoke:",max(femSmoker$SAT))
View(femSmoker)
18+18
-36/37 + (35*(1/37))
35*(1/37)
0.9459459+(-36/37)
(1+0.027)^2*(18/37)+(1+0.027)^2*(18/37)+(35+0.027)^2*(1/37)
sqrt(34.18543)
zeroWins <- (36/37)*(36/37)*(36/37)
oneWin<-(1/37)*(36/37)*(36/37)
twoWins<-(1/37)*(1/37)*(36/37)
threeWins<- (1/37)*(1/37)*(1/37)
threeWins
#create a variable with possible # wins
x<- c(0,1,2,3)
#create a vector with all probabilities
px <- c(zeroWins,oneWin,twoWins,threeWins)
test <- table(x,px)
test
test <- table(px)
test
test <- rbind(x,px)
test
View(test)
test <- cbind(x,px)
View(test)
#create a bar graph of the distributions
dist <- cbind(x,px)
barplot(dist)
barplot(dist$px)
barplot(dist$x)
gg<- barchart(dist $px$ x, data = dist)
library(ggplot2)
gg<- barchart(dist $px$ x, data = dist)
gg<- ggplot(dist, aes(x, px)) + geom_bar()
#create a bar graph of the distributions
dist <- data.frame(x,px)
View(dist)
barplot(dist$x)
library(ggplot2)
gg<- ggplot(dist, aes(x, px)) + geom_bar()
gg<- ggplot(dist, aes(x, px)) + geom_bar()
gg
#probability of each outcome
zeroWins <- round((36/37)*(36/37)*(36/37),digits=4)
oneWin<-round((1/37)*(36/37)*(36/37),digits = 4)
twoWins<-round((1/37)*(1/37)*(36/37),digits=4)
threeWins<- round((1/37)*(1/37)*(1/37),digits=4)
threeWins
#create a variable with possible # wins
x<- c(0,1,2,3)
#create a vector with all probabilities
px <- c(zeroWins,oneWin,twoWins,threeWins)
px
#create a bar graph of the distributions
dist <- data.frame(x,px)
barplot(dist$x)
barplot(dist)
barplot(dist$px)
library(ggplot2)
gg<- ggplot(dist, aes(x, px)) + geom_bar()
gg
barplot(dist$px, names = dist$x)
barplot(dist$px, names = dist$x,
xlab = "# of wins", ylab = "probability")
#population distribution
#par(mfrow=c(1,3))
hist(internet, main = "Population distribution \n of countries with internet",xlab="Internet")
#sample distributions
##n=25
n<-25
Bootsize <- 1e4
BootstrapMean <-numeric(length = Bootsize)
set.seed(201407)
for(i in 1:Bootsize)
BootstrapMean[i] <-mean(sample(internet, size = n, replace = TRUE))
hist(BootstrapMean, main = "Sample distribution \n n=25", xlab="Internet")
##n=100
n<-100
BootstrapMean2 <-numeric(length = Bootsize)
for(i in 1:Bootsize)
BootstrapMean2[i] <-mean(sample(internet, size = n, replace = TRUE))
hist(BootstrapMean2, main = "Sample distribution \n n=100", xlab="Internet")
qnorm(.975)
qt(.975,1)
qt(.975,2)
n<-850
CI <- c(20.55, 23.21)
t<-round(qt(.975,n-1),digits =4)
x<- CI[2]-((CI[2]-CI[1])/2)
cat("sample mean: ", x)
s<-round((CI[2]-x)/sqrt(n)*t,digits = 4)
cat("sample standard deviation: ",s)
x1
x1<- 564/1200
x1
n<- 1200
mu <- 600/1200
p_hat<- 564/1200
z_alpha<-round(-qt(0.95,n-1),digits=4)
cat("z < ",z_alpha)
n<- 1200
theta <- 600/1200
p_hat<- 564/1200
z_alpha<-round(-qt(0.95,n-1),digits=4)
cat("z < ",z_alpha)
sigma <- sqrt((theta*(1-theta))/n)
z<- (p_hat - mu)
sigma <- sqrt((theta*(1-theta))/n)
z<- (p_hat - mu)/sigma
z
sigma <- sqrt((theta*(1-theta))/n)
z<- (p_hat - mu)/sigma
cat("test statistic realization: ", round(z,digits=4))
sigma <- sqrt((theta*(1-theta))/n)
z<- (p_hat - mu)/sigma
cat("test statistic realization: ", round(z,digits=4))
cat("p-value: ", pnorm(z))
sigma <- sqrt((theta*(1-theta))/n)
z<- (p_hat - mu)/sigma
cat("test statistic realization: ", round(z,digits=4))
cat("p-value: ", round(pnorm(z),digits = 4))
pchisq(.95,3)
qchisq(.95,3)
1-pchisq(56,3)
2^2
3^2
9+4
+1
13+1
sqrt(14)
6^2
40/4
sqrt(40)
2*sqrt(10)
####clear out current environment and set path to csv####
rm(list = ls(all.names = TRUE))
setwd("/Users/navar135/Documents/UMN_Research/Projects/MagnoParvo/Stimuli")
####Process MP data####
#Set & transform Dataframes w Veins
MPtrue <- read.csv("PminusMnorm_data_20200724.csv", sep = ",", header = TRUE)
#remove useless columns
MPtrue<-MPtrue[ , !(names(MPtrue) %in% "mask")]
#transformdata from wide to long for stats
temp <- melt(MPtrue, id=c("subj","voxels"))
#rename variables
names(temp) <- c("subject","voxels", "roi", "signal")
#filter data by eccentricity
FOV<- filter(temp,roi=="FOV_depth0" | roi=="FOV_depth2" | roi=="FOV_depth4"  |
roi=="FOV_depth6"  | roi=="FOV_depth8"  | roi=="FOV_depth10")
MID <- filter(temp,roi=="MID_depth0" | roi=="MID_depth2" | roi=="MID_depth4"  |
roi=="MID_depth6"  | roi=="MID_depth8"  | roi=="MID_depth10")
PER <-filter(temp,roi=="PER_depth0" | roi=="PER_depth2" | roi=="PER_depth4"  |
roi=="PER_depth6"  | roi=="PER_depth8"  | roi=="PER_depth10")
#create a 4th column for depths & rename roi column in each datafram
sequence<- seq(0, 10, by=2) #create depth labels
FOV$depth<-rep(sequence, each=10)
FOV$roi <- "FOV"
MID$depth<-rep(sequence, each=10)
MID$roi <- "MID"
PER$depth<-rep(sequence, each=10)
PER$roi <- "PER"
#combine all three dataframes
MP <-rbind(FOV,MID,PER)
## set all variables as factors and set levels for stats
## there are two factors (roi and depth) and 3 levels
## for roi and 6 levels for depth
MP$roi <- as.factor(MP$roi)
MP$depth <- as.factor(MP$depth)
levels(MP$roi)<- list("FOV"=1,"MID"=2, "PER"=3)
####Process P and M data separate####
#Set & transform Dataframes w/o Veins
Ptrue <- read.csv("P_data_20200724.csv", sep = ",", header = TRUE)
#remove useless columns
Ptrue<-Ptrue[ , !(names(Ptrue) %in% "mask")]
#transform data from wide to long for stats
temp <- melt(Ptrue, id=c("subj","voxels"))
#rename variables
names(temp) <- c("subject","voxels", "roi", "signal")
#filter data by eccentricity
pFOV<- filter(temp,roi=="FOV_depth0" | roi=="FOV_depth2" | roi=="FOV_depth4"  |
roi=="FOV_depth6"  | roi=="FOV_depth8"  | roi=="FOV_depth10")
pMID <- filter(temp,roi=="MID_depth0" | roi=="MID_depth2" | roi=="MID_depth4"  |
roi=="MID_depth6"  | roi=="MID_depth8"  | roi=="MID_depth10")
pPER <-filter(temp,roi=="PER_depth0" | roi=="PER_depth2" | roi=="PER_depth4"  |
roi=="PER_depth6"  | roi=="PER_depth8"  | roi=="PER_depth10")
pALL <-filter(temp,roi=="ALL_depth0" | roi=="ALL_depth2" | roi=="ALL_depth4"  |
roi=="ALL_depth6"  | roi=="ALL_depth8"  | roi=="ALL_depth10")
#create a 5th column for depths & rename roi column in each datafram
sequence<- seq(0, 10, by=2)
pFOV$depth<-rep(sequence, each=10)
pFOV$roi <- "FOV"
pMID$depth<-rep(sequence, each=10)
pMID$roi <- "MID"
pPER$depth<-rep(sequence, each=10)
pPER$roi <- "PER"
pALL$depth <- rep(sequence, each=10)
pALL$roi <- "ALL"
#combine all three dataframes
P <-rbind(pFOV,pMID,pPER,pALL)
## do the same for magno
Mtrue <- read.csv("M_data_20200724.csv", sep = ",", header = TRUE)
#remove useless columns
Mtrue<-Mtrue[ , !(names(Mtrue) %in% "mask")]
#transformdata from wide to long for stats
temp <- melt(Mtrue, id=c("subj","voxels"))
#rename variables
names(temp) <- c("subject","voxels", "roi", "signal")
#filter data by eccentricity
mFOV<- filter(temp,roi=="FOV_depth0" | roi=="FOV_depth2" | roi=="FOV_depth4"  |
roi=="FOV_depth6"  | roi=="FOV_depth8"  | roi=="FOV_depth10")
mMID <- filter(temp,roi=="MID_depth0" | roi=="MID_depth2" | roi=="MID_depth4"  |
roi=="MID_depth6"  | roi=="MID_depth8"  | roi=="MID_depth10")
mPER <-filter(temp,roi=="PER_depth0" | roi=="PER_depth2" | roi=="PER_depth4"  |
roi=="PER_depth6"  | roi=="PER_depth8"  | roi=="PER_depth10")
mALL <-filter(temp,roi=="ALL_depth0" | roi=="ALL_depth2" | roi=="ALL_depth4"  |
roi=="ALL_depth6"  | roi=="ALL_depth8"  | roi=="ALL_depth10")
#create a 5th column for depths & rename roi column in each datafram
sequence<- seq(0, 10, by=2)
mFOV$depth<-rep(sequence, each=10)
mFOV$roi <- "FOV"
mMID$depth<-rep(sequence, each=10)
mMID$roi <- "MID"
mPER$depth<-rep(sequence, each=10)
mPER$roi <- "PER"
mALL$depth <- rep(sequence, each=10)
mALL$roi <- "ALL"
#combine all three dataframes
M <-rbind(mFOV,mMID,mPER,mALL)
####clear out current environment and set path to csv####
rm(list = ls(all.names = TRUE))
setwd("/Users/navar135/Documents/UMN_Research/Projects/MagnoParvo/Stimuli")
####Process MP data####
#Set & transform Dataframes w Veins
MPtrue <- read.csv("PminusMnorm_data_20200724.csv", sep = ",", header = TRUE)
#remove useless columns
MPtrue<-MPtrue[ , !(names(MPtrue) %in% "mask")]
#transformdata from wide to long for stats
temp <- melt(MPtrue, id=c("subj","voxels"))
library(dplyr)
library(reshape)
library(reshape)
library(tidyr)
library(car)
library(DescTools)
library(tidyverse)
library(RColorBrewer)
library(plotly)
library(lsmeans)
library(ez)
library(Hmisc)
library(sjstats)
####clear out current environment and set path to csv####
rm(list = ls(all.names = TRUE))
setwd("/Users/navar135/Documents/UMN_Research/Projects/MagnoParvo/Stimuli")
####Process MP data####
#Set & transform Dataframes w Veins
MPtrue <- read.csv("PminusMnorm_data_20200724.csv", sep = ",", header = TRUE)
#remove useless columns
MPtrue<-MPtrue[ , !(names(MPtrue) %in% "mask")]
#transformdata from wide to long for stats
temp <- melt(MPtrue, id=c("subj","voxels"))
#rename variables
names(temp) <- c("subject","voxels", "roi", "signal")
#filter data by eccentricity
FOV<- filter(temp,roi=="FOV_depth0" | roi=="FOV_depth2" | roi=="FOV_depth4"  |
roi=="FOV_depth6"  | roi=="FOV_depth8"  | roi=="FOV_depth10")
MID <- filter(temp,roi=="MID_depth0" | roi=="MID_depth2" | roi=="MID_depth4"  |
roi=="MID_depth6"  | roi=="MID_depth8"  | roi=="MID_depth10")
PER <-filter(temp,roi=="PER_depth0" | roi=="PER_depth2" | roi=="PER_depth4"  |
roi=="PER_depth6"  | roi=="PER_depth8"  | roi=="PER_depth10")
#create a 4th column for depths & rename roi column in each datafram
sequence<- seq(0, 10, by=2) #create depth labels
FOV$depth<-rep(sequence, each=10)
FOV$roi <- "FOV"
MID$depth<-rep(sequence, each=10)
MID$roi <- "MID"
PER$depth<-rep(sequence, each=10)
PER$roi <- "PER"
#combine all three dataframes
MP <-rbind(FOV,MID,PER)
## set all variables as factors and set levels for stats
## there are two factors (roi and depth) and 3 levels
## for roi and 6 levels for depth
MP$roi <- as.factor(MP$roi)
MP$depth <- as.factor(MP$depth)
levels(MP$roi)<- list("FOV"=1,"MID"=2, "PER"=3)
####Process P and M data separate####
#Set & transform Dataframes w/o Veins
Ptrue <- read.csv("P_data_20200724.csv", sep = ",", header = TRUE)
#remove useless columns
Ptrue<-Ptrue[ , !(names(Ptrue) %in% "mask")]
#transform data from wide to long for stats
temp <- melt(Ptrue, id=c("subj","voxels"))
#rename variables
names(temp) <- c("subject","voxels", "roi", "signal")
#filter data by eccentricity
pFOV<- filter(temp,roi=="FOV_depth0" | roi=="FOV_depth2" | roi=="FOV_depth4"  |
roi=="FOV_depth6"  | roi=="FOV_depth8"  | roi=="FOV_depth10")
pMID <- filter(temp,roi=="MID_depth0" | roi=="MID_depth2" | roi=="MID_depth4"  |
roi=="MID_depth6"  | roi=="MID_depth8"  | roi=="MID_depth10")
pPER <-filter(temp,roi=="PER_depth0" | roi=="PER_depth2" | roi=="PER_depth4"  |
roi=="PER_depth6"  | roi=="PER_depth8"  | roi=="PER_depth10")
pALL <-filter(temp,roi=="ALL_depth0" | roi=="ALL_depth2" | roi=="ALL_depth4"  |
roi=="ALL_depth6"  | roi=="ALL_depth8"  | roi=="ALL_depth10")
#create a 5th column for depths & rename roi column in each datafram
sequence<- seq(0, 10, by=2)
pFOV$depth<-rep(sequence, each=10)
pFOV$roi <- "FOV"
pMID$depth<-rep(sequence, each=10)
pMID$roi <- "MID"
pPER$depth<-rep(sequence, each=10)
pPER$roi <- "PER"
pALL$depth <- rep(sequence, each=10)
pALL$roi <- "ALL"
#combine all three dataframes
P <-rbind(pFOV,pMID,pPER,pALL)
## do the same for magno
Mtrue <- read.csv("M_data_20200724.csv", sep = ",", header = TRUE)
#remove useless columns
Mtrue<-Mtrue[ , !(names(Mtrue) %in% "mask")]
#transformdata from wide to long for stats
temp <- melt(Mtrue, id=c("subj","voxels"))
#rename variables
names(temp) <- c("subject","voxels", "roi", "signal")
#filter data by eccentricity
mFOV<- filter(temp,roi=="FOV_depth0" | roi=="FOV_depth2" | roi=="FOV_depth4"  |
roi=="FOV_depth6"  | roi=="FOV_depth8"  | roi=="FOV_depth10")
mMID <- filter(temp,roi=="MID_depth0" | roi=="MID_depth2" | roi=="MID_depth4"  |
roi=="MID_depth6"  | roi=="MID_depth8"  | roi=="MID_depth10")
mPER <-filter(temp,roi=="PER_depth0" | roi=="PER_depth2" | roi=="PER_depth4"  |
roi=="PER_depth6"  | roi=="PER_depth8"  | roi=="PER_depth10")
mALL <-filter(temp,roi=="ALL_depth0" | roi=="ALL_depth2" | roi=="ALL_depth4"  |
roi=="ALL_depth6"  | roi=="ALL_depth8"  | roi=="ALL_depth10")
#create a 5th column for depths & rename roi column in each datafram
sequence<- seq(0, 10, by=2)
mFOV$depth<-rep(sequence, each=10)
mFOV$roi <- "FOV"
mMID$depth<-rep(sequence, each=10)
mMID$roi <- "MID"
mPER$depth<-rep(sequence, each=10)
mPER$roi <- "PER"
mALL$depth <- rep(sequence, each=10)
mALL$roi <- "ALL"
#combine all three dataframes
M <-rbind(mFOV,mMID,mPER,mALL)
#group data and compute mean and sd for veins mask for P and M activation separately
sumFOVp<- pFOV %>%
group_by(depth) %>%
dplyr::summarise(average = mean(signal),sd=sd(signal))
sumMIDp<-pMID %>%
group_by(depth) %>%
dplyr::summarise(average = mean(signal),sd=sd(signal))
sumPERp <- pPER %>%
group_by(depth) %>%
dplyr::summarise(average = mean(signal),sd=sd(signal))
sumALLp <- pALL %>%
group_by(depth) %>%
dplyr::summarise(average = mean(signal),sd=sd(signal))
sumSignalP <- rbind(sumFOVp, sumMIDp, sumPERp)
roinew <- c("FOV","FOV","FOV","FOV","FOV","FOV",
"MID","MID","MID","MID","MID","MID",
"PER","PER","PER","PER","PER","PER")
#standardize depths
sumSignalP$depth<-sumSignalP$depth/max(sumSignalP$depth)
sumSignalP$cond<-rep("P", each=18)
#standard error
se <- sumSignalP$sd/sqrt(length(Ptrue$subj))
#put it into 1 dataframe by depths
Pplot<-data.frame(sumSignalP,roinew,se)
#quick stats to verify significance of plot 2
PAovDat<- filter(P,roi !="ALL")
Paov<-aov(signal~roi,data=PAovDat)
summary(Paov)
PttestDat<- filter(PAovDat,roi != "MID")
t.test(signal~roi,data=PttestDat,paired=T)
PttestDat
View(PttestDat)
#quick stats to verify significance of plot 2
PAovDat<- filter(P,roi !="ALL")
Paov<-aov(signal~roi,data=PAovDat)
PttestDat<- filter(PAovDat,depth != 4)
PttestDat<- filter(PAovDat,depth != 4 |
depth != 6)
PttestDat<- filter(PAovDat,depth != 4
)
PttestDat<- filter(PAovDat,depth != 4 | depth != 6
)
PttestDat<- filter(PAovDat,depth == 0 | depth == 10
)
PttestDat<- filter(PAovDat,depth == 0 |
depth == 10 |
roi != "MID"
)
PttestDat
PttestDat<- filter(PAovDat,depth == 0 |
depth == 10 |
)
PttestDat<- filter(PAovDat,depth == 0 |
depth == 10
)
PttestDat<- filter(PAovDat,roi != "MID" )
PttestDat<- filter(PAovDat,depth == 0 |
depth == 10 )
PttestDat<- filter(PttestDat,roi != "MID" )
t.test(signal~roi,data=PttestDat,paired=T)
PttestDat<- filter(PAovDat,depth == 0 |
depth == 2 |
depth == 8 |
depth == 10 )
PttestDat<- filter(PttestDat,roi != "MID" )
t.test(signal~roi,data=PttestDat,paired=T)
#quick stats to verify significance of plot 2
PAovDat<- filter(P,roi !="ALL")
Paov<-aov(signal~roi,data=PAovDat)
summary(Paov)
PttestDat<- filter(PAovDat,depth == 0 |
# depth == 2 |
# depth == 8 |
depth == 10 )
PttestDat<- filter(PttestDat,roi != "MID" )
t.test(signal~roi,data=PttestDat,paired=T)
MAovDat<- filter(M,roi !="ALL")
Maov<-aov(signal~roi,data=MAovDat)
summary(Maov)
MttestDat<- filter(MAovDat,depth == 0 |
# depth == 2 |
# depth == 8 |
depth == 10 )
MttestDat<- filter(MttestDat,roi != "MID")
t.test(signal~roi,data=MttestDat,paired=T)
View(MttestDat)
t.test(signal~roi,data=PttestDat,paired=T)
rm(list = ls(all.names = TRUE))
rm(list = ls(all.names = TRUE))
setwd("/Users/navar135/Documents/UMN_Classes/Fall 2020/STAT5302-Regression Analysis")
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls(all.names = TRUE))
setwd("/Users/navar135/Documents/UMN_Classes/Fall 2020/STAT5302-Regression Analysis")
summary(oldfaith)
install.packages("datasets")
install.packages("datasets")
library("datasets")
install.packages("alr4")
library("alr4")
knitr::opts_chunk$set(echo = F)
rm(list = ls(all.names = TRUE))
setwd("/Users/navar135/Documents/UMN_Classes/Fall 2020/STAT5302-Regression Analysis")
install.packages("alr4")
library("alr4")
install.packages("alr4")
# Load dataset
data(oldfaith)
# Load dataset
oldf<- data(oldfaith)
force(oldfaith)
View(oldfaith)
View(oldfaith)
install.packages("ggplot2")
library("ggplot2")
knitr::opts_chunk$set(echo = F)
rm(list = ls(all.names = TRUE))
setwd("/Users/navar135/Documents/UMN_Classes/Fall 2020/STAT5302-Regression Analysis")
install.packages("alr4")
install.packages("ggplot2")
library("alr4")
library("ggplot2")
install.packages("alr4")
install.packages("ggplot2")
# Load dataset
data(oldfaith)
# Load dataset
data(oldfaith)
gg<-ggplot(data = oldfaith, aes(x=duration, y = interval))
gg
# Load dataset
data(oldfaith)
gg<-ggplot(data = oldfaith, aes(x=Duration, y = Interval))
gg
# Load dataset
data(oldfaith)
gg<-ggplot(data = oldfaith, aes(x=Duration, y = Interval)) +
geom_point()
gg
# Load dataset
data(oldfaith)
gg<-ggplot(data = oldfaith, aes(x=Duration, y = Interval)) +
geom_point()
gg
summary(oldfaith)
gg<-ggplot(data = oldfaith, aes(x=Duration, y = Interval)) +
geom_point() +
geom_smooth(method = "lm")
gg
gg<-ggplot(data = oldfaith, aes(x=Duration, y = Interval)) +
geom_point() +
geom_smooth(method = "lm", se = F)
gg
# Load dataset
data(oldfaith)
gg<-ggplot(data = oldfaith, aes(x=Duration, y = Interval)) +
geom_point() +
geom_smooth(method = "lm", se = F)
gg
summary(oldfaith)
summary(lm(oldfaith$Interval~oldfaith$Duration))
gg
summary(lm(oldfaith$Interval~oldfaith$Duration))
